setwd("Z:/Dokumente/Coursera/Reproducible Research/Assignment1/RepData_PeerAssessment1")
studis <- read.csv("activity.csv", header=T)
library("knitr")
library("rmarkdown", lib.loc="D:/Program Files/R/R-3.1.0/library")
str(studis)
head(studis)
head(studis,50)
library("reshape2", lib.loc="D:/Program Files/R/R-3.1.0/library")
melt(studis, na.rm = F, value.name = "steps")
head(melt(studis, na.rm = F, value.name = "steps"))
head(melt(studis, id="date", na.rm = F, value.name = "steps"))
head(melt(studis, id="date", na.rm = F, value.name = "steps"),50)
dcast(studis, date~steps, sum)
dcast(studis, steps, sum)
tapply(studis$date, studis$steps, sum)
tapply(studis$steps, studis$date, sum)
hist(tapply(studis$steps, studis$date, sum))
summary(studis)
library("ggplot2", lib.loc="D:/Program Files/R/R-3.1.0/library")
hist(tapply(studis$steps, studis$date, sum), main="Steps per day", xlab="number of steps per day")
stepsPday <- tapply(studis$steps, studis$date, sum)
hist(stepsPday, main="Steps per day", xlab="number of steps per day")
mean(stepsPday)
stepsPday
stepsPday <- sapply(studis$steps, studis$date, sum)
stepsPday <- apply(studis$steps, studis$date, sum)
stepsPday <- apply(studis$steps, studis$date, sum)
unstack(stepsPday)
stack(stepsPday)
hist(stack(stepsPday), main="Steps per day", xlab="number of steps per day")
hist(stack(stepsPday)$values, main="Steps per day", xlab="number of steps per day")
stepsPday <- stack(stepsPday)
hist(stepsPday$values, main="Steps per day", xlab="number of steps per day")
stepsPday
mean(stepsPday)
mean(stepsPday$values)
mean(stepsPday$values, na.rm=T)
median(stepsPday$values, na.rm=T)
studis[100:200,]
unique(studis[,3])
unique(studis[,2])
tapply(studis$steps, studis$interval, mean)
tapply(studis$steps, studis$interval, mean, simplify=F)
tapply(studis$steps, studis$interval, mean, na.rm=T, simplify=T)
stack(tapply(studis$steps, studis$interval, mean, na.rm=T, simplify=T))
timeList <- stack(tapply(studis$steps, studis$interval, mean, na.rm=T, simplify=T))
plot(timeList, type="l")
plot(timeList$values~timeList$ind, type="l")
plot(timeList$values~timeList$ind, type="l", main="Steps over an Avergae Day", xlab="Daytime", ylab="Average steps in 5 minutes")
plot(timeList$values~timeList$ind, type="l", main="Steps over an Avergae Day", xlab="Daytime (n-th 5 minute interval)", ylab="Average steps in 5 minutes")
max(timeList$values)
timeList$values[max(timeList$values),]
timeList$values[max(timeList$values),1:2]
which.max(timeList$values)
timeList[which.max(timeList$values),]
timeList[which.max(timeList$values),2:3]
timeList[which.max(timeList$values),]
for (step in studis$steps) {
countNA <- countNA + 1
}
countNA
countNA <- 0
for (step in studis$steps) {
countNA <- countNA + 1
}
countNA
countNA <- 0
for (step in studis$steps) {
if (is.na(step)){
countNA <- countNA + 1
}
}
countNA
studis[studis$steps=0,]
studis[studis$steps==0,]
studis[is.na(studis$steps)==T,]
for (step in studis$steps) {
if (is.na(step)){
print(studis$date)
}
}
for (line in studis) {
if (is.na(line$steps)){
print(line$date)
}
}
for (line in studis) {
#if (is.na(line$steps)){
print(line$date)
#}
}
for (line in studis) {
#if (is.na(line$steps)){
print(date)
#}
}
for (line in studis) {
#if (is.na(line$steps)){
print('1')
#}
}
stepsPday
tapply(studis$steps, studis$interval, sum)
tapply(studis$steps, studis$interval, sum, ra.rm=T)
tapply(studis$steps, studis$interval, sum, ra.rm=F)
tapply(studis$steps, studis$interval, count)
melt(studis, value.name = "steps")
melt(studis, value.name = "steps")[1:50,]
melt(studis, na.rm=T, value.name = "steps")[1:50,]
melt(studis, na.rm=T, value.name = "steps")
melt(studis, na.rm=T, value.name = "steps")[1:50,]
melt(studis, id=c(date,interval),na.rm=F, value.name = "steps")[1:50,]
melt(studis, id=c(date,"interval"),na.rm=F, value.name = "steps")[1:50,]
melt(studis, id=c("date","interval"),na.rm=F, value.name = "steps")[1:50,]
melt(studis, id=interval", na.rm=F, value.name = "steps")[1:50,]
melt(studis, id="interval", na.rm=F, value.name = "steps")[1:50,]
melt(studis, id="interval", na.rm=T, value.name = "steps")[1:50,]
unstack(studis)
unstack(studis, interval)
unstack(studis, studis$interval)
reshape(studis, idvar="interval")
reshape(studis, idvar="interval", direction="wide")
reshape(studis, idvar=c("interval","date"), direction="wide")
reshape(studis, idvar=studis$interval , direction="wide")
reshape(studis, timevar="interval" , direction="wide")
reshape(studis, timevar="interval" , idvar="date", direction="wide")
reshape(studis, idvar="interval" , timevar="date", direction="wide")
intBYdate <- reshape(studis, idvar="interval" , timevar="date", direction="wide")
reshape(studis, timevar="interval" , idvar="date", direction="wide")
intBYdate <- reshape(studis, timevar="interval" , idvar="date", direction="wide")
tapply(intBYdate, mean, na.rm=T)
lapply(intBYdate, mean, na.rm=T)
lapply(intBYdate, mean, na.rm=T, simplify=T)
stack(lapply(intBYdate, mean, na.rm=T))
intBYdate
stack(lapply(intBYdate, sum, na.rm=T))
stack(lapply(intBYdate, mean, na.rm=T))
stack(lapply(intBYdate, sum, na.rm=T))
stack(lapply(intBYdate[2,], sum, na.rm=T))
stack(lapply(intBYdate[,2:], sum, na.rm=T))
stack(lapply(intBYdate[,-1], sum, na.rm=T))
stack(lapply(intBYdate[,-1], mean, na.rm=T))
stack(lapply(intBYdate[,-1], max, na.rm=T))
stack(lapply(intBYdate[,-1], mean, na.rm=T))
studis[1:20,]
studisWOna <- studis
reshape(studis, timevar="interval" , idvar="date", direction="wide")
reshape(studis, timevar="interval" , idvar="date", direction="long")
for (line in studis$steps){
if (is.na(step)){
print row(line)
}
}
for (line in studis$steps){
if (is.na(line)){
print row(line)
}
}
for (line in studis$steps){
if (is.na(line)){
print(row(line))
}
}
stack(lapply(intBYdate[,-1], mean, na.rm=T))
studisWOna <- studis
studisWOna
studis[1:20,]
stack(lapply(intBYdate[,-1], mean, na.rm=T))
intBYdate
studis[1:20,]
stack(lapply(intBYdate[,-1], mean, na.rm=T))
aveDays <- stack(lapply(intBYdate[,-1], mean, na.rm=T))
substring(aveDays$ind, 7)
lapply(aveDays$ind, substring(7)
)
lapply(aveDays$ind, substring(aveDays$ind,7))
lapply(aveDays$ind, function(aveDays$ind,7) substring)
aveDays[,2] <- substring(aveDays$ind,7)
aveDays
merge(studisWOna, aveDays, by.x = "interval", by.y = "ind")
merge(studisWOna, aveDays, by.x = "interval", by.y = "ind")[1:30,]
merge(studisWOna, aveDays, by.x = "interval", by.y = "ind")[31:70,]
studisWOna <- merge(studisWOna, aveDays, by.x = "interval", by.y = "ind")[31:70,]
if (is.na(studisWOna[,2])==T){
studisWOna[,2]<-studisWOna[,4]
}
studisWOna
studisWOna <- studis
studisWOna <- merge(studisWOna, aveDays, by.x = "interval", by.y = "ind")[31:70,]
studisWOna <- studis
studisWOna <- merge(studisWOna, aveDays, by.x = "interval", by.y = "ind")
if (is.na(studisWOna[,2])==T){
studisWOna[,2]<-studisWOna[,4]
}
studisWOna
studisWOna <- studis
studisWOna <- merge(studisWOna, aveDays, by.x = "interval", by.y = "ind")
lapply(studisWOna, function(comp){
print(comp)
}
lapply(studisWOna, function(comp)){
print(comp)
}
lapply(studisWOna, function(comp){print(comp)} )
studisWOna
killNA <- function(x1,x2){
if (is.na(x1)=T) x1 <- x2
}
mapply(killNA, studisWOna$steps, studisWOna$values)
killNA <- function(x1,x2){
if (is.na(x1)=T) {x1 <- x2}
}
mapply(killNA, studisWOna$steps, studisWOna$values)
killNA <- function(x1,x2){
if (is.na(x1)=T) {x1 <- x2}
}
killNA <- function(x1,x2){
if (is.na(x1)==T) {x1 <- x2}
}
mapply(killNA, studisWOna$steps, studisWOna$values)
mapply(killNA, studisWOna$steps, studisWOna$values, simpliy=T)
mapply(killNA, studisWOna$steps, studisWOna$values, simplify=T)
mapply(killNA, studisWOna$steps, studisWOna$values, SIMPLIFY=T)
studisWOna$steps <- max(studisWOna$steps,studisWOna$values)
studisWOna
studisWOna$steps <- max(studisWOna$steps,studisWOna$values, na.rm=T)
studisWOna
studisWOna <- studis
studisWOna <- merge(studisWOna, aveDays, by.x = "interval", by.y = "ind")
studisWOna$new <- max(studisWOna$steps,studisWOna$values, na.rm=T)
studisWOna[1:30,]
library("plyr", lib.loc="D:/Program Files/R/R-3.1.0/library")
studisWOna <- studis
studisWOna <- merge(studisWOna, aveDays, by.x = "interval", by.y = "ind")
studisWOna$steps[is.na(studisWOna$steps)] <- studisWOna$values
studisWOna <- studis
studisWOna <- merge(studisWOna, aveDays, by.x = "interval", by.y = "ind")
studisWOna$steps[is.na(studisWOna$steps)] <- studisWOna$values[is.na(studisWOna$steps)]
studisWOna[1:30,]
studisWOna <- studis
studisWOna <- merge(studisWOna, aveDays, by.x = "interval", by.y = "ind")
studisWOna <- studis
studisWOna <- merge(studisWOna, aveDays, by.x = "interval", by.y = "ind")
studisWOna$steps[is.na(studisWOna$steps)] <- studisWOna$values[is.na(studisWOna$steps)]
studisWOna <- studisWOna[,1:3]
studisWOna[1:30,]
View(studisWOna)
rm(studisWOna)
stepsPdayWoNa <- tapply(studisWoNa$steps, studisWoNa$date, sum)
stepsPdayWoNa <- stack(stepsPdayWoNa)
stepsPdayWoNa <- tapply(studisWoNa$steps, studisWoNa$date, sum)
intBYdate <- reshape(studis, timevar="interval" , idvar="date", direction="wide")
aveDays <- stack(lapply(intBYdate[,-1], mean, na.rm=T))
aveDays[,2] <- substring(aveDays$ind,7)
studisWoNa <- studis
studisWoNa <- merge(studisWoNa, aveDays, by.x = "interval", by.y = "ind")
studisWoNa$steps[is.na(studisWoNa$steps)] <- studisWoNa$values[is.na(studisWoNa$steps)]
studisWoNa <- studisWOna[,1:3]
intBYdate <- reshape(studis, timevar="interval" , idvar="date", direction="wide")
aveDays <- stack(lapply(intBYdate[,-1], mean, na.rm=T))
aveDays[,2] <- substring(aveDays$ind,7)
studisWoNa <- studis
studisWoNa <- merge(studisWoNa, aveDays, by.x = "interval", by.y = "ind")
studisWoNa$steps[is.na(studisWoNa$steps)] <- studisWoNa$values[is.na(studisWoNa$steps)]
studisWoNa <- studisWoNa[,1:3]
stepsPdayWoNa <- tapply(studisWoNa$steps, studisWoNa$date, sum)
stepsPdayWoNa <- stack(stepsPdayWoNa)
hist(stepsPdayWoNa$values, main="Steps per day", xlab="number of steps per day")
mean(stepsPday$values, na.rm=T)- mean(stepsPdayWoNa$values)
weekdays(studisWoNa$date)[1:30,]
as.date(studisWoNa$date[1])
as.Date(studisWoNa$date[1])
as.Date(studisWoNa$date[1:5])
weekdays(as.Date(studisWoNa$date[1:5]))
studisWoNa[,"daytype"]<-weekdays(as.Date(studisWoNa$date))
studisWoNa[1:20,]
studisWoNa[,"daytype"]<- if (weekdays(as.Date(studisWoNa$date))== "Samstag"){1}
daycat <- function(x){
if (x=="Samstag" or x== "Sonntag"){
"weekend"
}else{
"weekday"
}
}
daycat <- function(x){
if (x=="Samstag" or x== "Sonntag"){
"weekend"
}else{
"weekday"
}
}
daycat <- function(x){
if (x=="Samstag") or (x== "Sonntag"){
"weekend"
}else{
"weekday"
}
}
daycat <- function(x){
if (x == "Samstag") {
"weekend"
}else{
"weekday"
}
}
daycat <- function(x){
if (x == "Samstag") {
"weekend"
}else{
"weekday"
}
}
daycat("Samstag")
daycat <- function(x){
if (x == "Samstag" | x == "Sonntag"){
"weekend"
}else{
"weekday"
}
}
studisWoNa[,"daytype"]<-  daycat(weekdays(as.Date(studisWoNa$date)))
daycat(c("Sonntag","Montag"))
lapply(c("Sonntag","Montag"),daycat)
sapply(c("Sonntag","Montag"),daycat)
apply(c("Sonntag","Montag"),daycat)
sapply(c("Sonntag","Montag"),daycat)
stack(sapply(c("Sonntag","Montag"),daycat))
stack(sapply(c("Sonntag","Montag"),daycat))[,1]
stack(sapply(weekdays(as.Date(studisWoNa$date)),daycat))[,1]
studisWoNa[,"daytype"]<-  stack(sapply(weekdays(as.Date(studisWoNa$date)),daycat))[,1]
studisWoNa[1:20,]
timeListByDaytype <- stack(tapply(studisWoNa$steps, studisWoNa$interval, mean, simplify=T))
timeListByDaytype
rm(timeListWeekBxDaytype)
rm(timeListWeekByDaytype)
rm(timeListByDaytype)
timeListWeek <- stack(tapply(studisWoNa$steps[daytype="weekday"], studisWoNa$interval, mean, simplify=T))
timeListWeek <- stack(tapply(studisWoNa$steps[daytype="weekday"], studisWoNa$interval[daytype="weekday"], mean, simplify=T))
timeListWeek <- stack(tapply(studisWoNa$steps[studisWoNa$daytype="weekday"], studisWoNa$interval[studisWoNa$daytype="weekday"], mean, simplify=T))
tapply(studisWoNa$steps, studisWoNa$interval, mean, simplify=T)
stack(tapply(studisWoNa$steps, studisWoNa$interval, mean, simplify=T))
aggregate(studisWoNa[studisWoNa$daytype="weekday"], studisWoNa$interval, mean)
aggregate(studisWoNa[studisWoNa$daytype=="weekday"], studisWoNa$interval, mean)
aggregate(studisWoNa[studisWoNa$daytype=="weekday",], studisWoNa$interval, mean)
aggregate(studisWoNa[studisWoNa$daytype=="weekday",], by = studisWoNa$interval, mean)
aggregate(studisWoNa[studisWoNa$daytype=="weekday",], by = list(studisWoNa$interval), mean)
aggregate(studisWoNa[studisWoNa$daytype=="weekday",], by = list(studisWoNa$interval[studisWoNa$daytype=="weekday",]), mean)
aggregate(studisWoNa, by = list(studisWoNa$interval), mean)
aggregate(studisWoNa[daytype="weekday"], by = list(studisWoNa$interval), mean)
studisWoNa[daytype="weekday"]
studisWoNa[studisWoNa$daytype=="weekday"]
studisWoNa[studisWoNa$daytype=="weekday",]
aggregate(studisWoNa[studisWoNa$daytype=="weekday",], by = list(studisWoNa$interval), mean)
aggregate(studisWoNa[studisWoNa$daytype=="weekday",], by = list(studisWoNa$interval[studisWoNa$daytype=="weekday",]), mean)
studisWeek <- studisWoNa[studisWoNa$daytype=="weekday",]
aggregate(studisWeek, by = list(studisWeek$interval), mean)
timeListWeek <- aggregate(studisWeek, by = list(studisWeek$interval), mean)[,2:3]
timeListWeek
studisWeekend <- studisWoNa[studisWoNa$daytype=="weekend",]
timeListWeekend <- aggregate(studisWeekend, by = list(studisWeekend$interval), mean)[,2:3]
plot(timeListWeek, type= "l")
par(mfrow=c(1,2))
{
plot(timeListWeek, type= "l")
plot(timeListWeekend, type= "l")
}
par(mfrow=c(2,1))
{
plot(timeListWeek, type= "l")
plot(timeListWeekend, type= "l")
}
par(mfrow=c(2,1))
plot(timeListWeek, type= "l")
plot(timeListWeekend, type= "l")
aggregate(studisWeek, by = list(studisWeek$interval), mean)
aggregate(studisWeek, by = studisWeek$interval, mean)
timeListWeek <- aggregate(steps~interval+daytype, data="studisWoNa", mean)
timeListWeek <- aggregate(steps~interval+daytype, data = studisWoNa, mean)
timeListWeek
xyplot(steps ~ interval | daytype, data = studisWoNa, layout = c(1,2))
library("lattice")
xyplot(steps ~ interval | daytype, data = studisWoNa, layout = c(1,2))
xyplot(steps ~ interval | daytype, data = studisWoNa, layout = c(1,2), type= "l")
)
xyplot(steps ~ interval | daytype, data = studisWoNa, layout = c(1,2), type= "l")
xyplot(steps ~ interval | daytype, data = timeListWeek, layout = c(1,2), type= "l")
